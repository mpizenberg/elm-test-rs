name: CI

on:
  pull_request:
  push:
    branches: [ master, main ]

jobs:
  build:
    name: Build artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - linux-musl
          - windows
          - macos
          - macos-arm-64
          - linux-arm-64
          - linux-arm-32
        include:
          - build: linux-musl
            os: ubuntu-latest
            toolchain: stable
            target: x86_64-unknown-linux-musl

          - build: windows
            os: windows-latest
            toolchain: stable
            target: x86_64-pc-windows-msvc

          - build: macos
            os: macos-latest
            toolchain: stable
            target: x86_64-apple-darwin

          - build: macos-arm-64
            os: macos-latest
            toolchain: nightly
            target: aarch64-apple-darwin
            cross: true

          - build: linux-arm-64
            os: ubuntu-latest
            toolchain: nightly
            target: aarch64-unknown-linux-musl
            cross: true

          - build: linux-arm-32
            os: ubuntu-latest
            toolchain: nightly
            target: arm-unknown-linux-musleabihf
            cross: true

    steps:
      - name: install musl-tools if musl target
        if: ${{ contains(matrix.target, 'musl') }}
        run: sudo apt install musl-tools

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}
          override: true

      - name: Download cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/
            target/
          key: ${{ matrix.target }}-build-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ matrix.target }}-build-
            ${{ matrix.target }}-

      - name: Install cross compiler
        if: ${{ matrix.cross }}
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cross

      - uses: actions-rs/cargo@v1
        if: ${{ !matrix.cross }}
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Specific cross compilation for macos aarch64
        if: ${{ matrix.cross && matrix.target == 'aarch64-apple-darwin' }}
        run: SDKROOT=$(xcrun -sdk macosx11.1 --show-sdk-path) MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx11.1 --show-sdk-platform-version) cross build --release --target ${{ matrix.target }}

      - name: Use cross instead of cargo for cross compilation
        if: ${{ matrix.cross && matrix.target != 'aarch64-apple-darwin' }}
        run: cross build --release --target ${{ matrix.target }}

      - name: Compress compiled binary
        if: ${{ !startsWith(matrix.os, 'windows') }}
        run: |
          cd target/${{ matrix.target }}/release
          tar czf elm-test-rs_${{ matrix.target }}.tar.gz elm-test-rs

      - uses: actions/upload-artifact@v2
        if: ${{ !startsWith(matrix.os, 'windows') }}
        with:
          name: elm-test-rs_${{ matrix.target }}.tar.gz
          path: target/${{ matrix.target }}/release/elm-test-rs_${{ matrix.target }}.tar.gz

      - uses: actions/upload-artifact@v2
        if: ${{ startsWith(matrix.os, 'windows') }}
        with:
          name: elm-test-rs_${{ matrix.target }}
          path: target/${{ matrix.target }}/release/elm-test-rs.exe

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    env:
      ELM_HOME: '${{ github.workspace }}/elm-home'

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: mpizenberg/elm-tooling-action@746bbdcd1ed901364e4c8380058da4c22ebfbb92
        with:
          cache-key: elm-home-${{ matrix.os }}-0
          cache-restore-key: elm-home-${{ matrix.os }}
          elm-tooling-dir: tests

      - name: Clear elm-test-runner package in cache
        run: rm -rf $ELM_HOME/0.19.1/packages/mpizenberg/elm-test-runner
        shell: bash

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Download cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/
            target/
          key: test-${{ matrix.os }}-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            test-${{ matrix.os }}-

      - uses: actions-rs/cargo@v1
        with:
          command: test
          # args: --release --jobs 1
          args: --release

      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --features deno

  check_formatting:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt
          override: true

      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Check clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
          override: true

      - uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: -D warnings
        with:
          command: clippy
