name: CI

on:
  pull_request:
  push:
    branches: [master, main]

env:
  ELM_HOME: "${{ github.workspace }}/elm-home"
  TARGETS_JSON: .config/targets.json

jobs:
  # Create the targets matrix from the targets.json config file
  prepare-config:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        run: echo matrix={"include":$(cat $TARGETS_JSON)} >> $GITHUB_OUTPUT

  build:
    needs: [prepare-config]
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-config.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2

      - name: install musl-tools (if needed)
        if: ${{ contains(matrix.target, 'musl') }}
        run: sudo apt install musl-tools

      - name: Install cross (if needed)
        if: ${{ matrix.tool == 'cross' }}
        run: cargo install cross

      - name: Build binary
        run: ${{ matrix.tool }} build --release --target ${{ matrix.target }}

      - name: Compress compiled binary
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ${{ matrix.archive_name }} ${{ matrix.binary_name }}
        shell: bash

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.archive_name }}
          compression-level: 0

  create-npm-package:
    needs: [build]
    # if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Create NPM Package
        run: |
          # Extract the version from the git tag
          VERSION="v3.1.0"
          # VERSION="${{ github.ref_name }}"
          VERSION=${VERSION#v}
          echo $VERSION

          # Extract the executables from the archives to each sub-package
          ls -l artifacts/

      # - name: Upload NPM Package Tarball
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: npm-package-tarball
      #     path: "*.tgz"

  # test:
  #   name: Test
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os:
  #         - ubuntu-latest
  #         - windows-latest
  #         - macos-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: recursive

  #     - uses: mpizenberg/elm-tooling-action@v1.7
  #       with:
  #         cache-key: elm-home-${{ matrix.os }}-0
  #         elm-tooling-dir: tests

  #     - name: Clear elm-test-runner package in cache
  #       run: rm -rf $ELM_HOME/0.19.1/packages/mpizenberg/elm-test-runner
  #       shell: bash

  #     - uses: dtolnay/rust-toolchain@stable
  #     - run: cargo test --release

  #     # TODO: re-activate and fix Deno tests
  #     # - uses: denoland/setup-deno@v1
  #     # - run: cargo test --release --features deno

  # checks:
  #   name: Check formatting and Clippy
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: recursive

  #     - uses: dtolnay/rust-toolchain@stable
  #       with:
  #         components: rustfmt, clippy
  #     - run: cargo fmt --all -- --check
  #     - run: cargo clippy
  #       env:
  #         RUSTFLAGS: -D warnings
